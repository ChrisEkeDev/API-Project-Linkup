const validateCreateGroup = [
    check('name').exists({checkFalsy: true}).isLength({max: 60}).withMessage('Name must be 60 characters or less'),
    check('about').exists({checkFalsy: true}).isLength({min: 50}).withMessage('About must be 50 characters or more'),
    check('type').exists({checkFalsy: true}).isIn,
    check('private').exists({checkFalsy: true}).isBoolean().withMessage('Private must be a boolean'),
    check('city').exists({checkFalsy: true}).withMessage('City is required'),
    check('state').exists({checkFalsy: true}).isAlpha().isLength({min: 2, max: 2}).withMessage('State is required'),
    handleValidationErrors
]

    ///////////////////////////////////////////////////////////////////////
    // Create a group

        const { name, about, type, private, city, state } = req.body;
    const user = req.user;
    let newGroup = await Group.create({
        organizerId: user.id,
        name,
        about,
        type,
        private,
        city,
        state
    });
    return res.status(201).json(newGroup)


    /////////////////////////////////////////////////////////////////////////////
    // Add an image to a group based on id

        const { groupID } = req.params;
    const { url, preview } = req.body;
    let group = await Group.findByPk(groupID)
    let newImage = await group.createGroupImage({
        url,
        preview
    })

    // If there is no group, return error message
    if (!group) {
        res.status(404).json({
            message: "Group couldn't be found"
        })
    }

    return res.status(200).json(newImage)


    /////////////////////////////////////////////////////////////////////////////
    // Update a group based on ID

        const { groupID } = req.params;
    const { name, about, type, private, city, state } = req.body;
    let group = await Group.findByPk(groupID);

    // If there is no group, return error message
    if (!group) {
        res.status(404).json({
            message: "Group couldn't be found"
        })
    }

    await group.set({
        name: name ? name : group.name,
        about: about ? about : group.about,
        type: type ? type : group.type,
        private: private ? private : group.private,
        city: city ? city : group.city,
        state: state ? state : group.state
    })

    await group.save();

    return res.status(200).json(group)


    ////////////////////////////////////////////////////////////////////////////
    // Delete a group based on ID

        const { groupID } = req.params;
    let group = await Group.findByPk(groupID)

    // If there is no group, return error message
    if (!group) {
        res.status(404).json({
            message: "Group couldn't be found"
        })
    }

    await group.destroy();

    return res.status(200).json({
        message: "Successfully deleted"
    })
